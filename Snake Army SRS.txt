
Software Requirements Specification
for
Chess Game
Version 1.0 approved
Prepared by Snake Army
Texas State University
1/28/18

Table of Contents
Table of Contents	ii
Revision History	ii
1.	Introduction					1
1.1	Purpose						1
1.2	Document Conventions				1
1.3	Intended Audience and Reading Suggestions	1
1.4	Product Scope					1
1.5	References					1
2.	Overall Description				2
2.1	Product Perspective				2
2.2	Product Functions				2
2.3	User Classes and Characteristics		2
2.4	Operating Environment				2
2.5	Design and Implementation Constraints		2
2.6	User Documentation				2
2.7	Assumptions and Dependencies			3
3.	External Interface Requirements			3
3.1	User Interfaces					3
3.2	Hardware Interfaces				3
3.3	Software Interfaces				3
3.4	Communications Interfaces			3
4.	System Features					4
4.1	System Feature 1				4
4.2	System Feature 2 (and so on)			4
5.	Other Nonfunctional Requirements		4
5.1	Performance Requirements			4
5.2	Safety Requirements				5
5.3	Security Requirements				5
5.4	Software Quality Attributes			5
5.5	Business Rules					5
6.	Other Requirements				5
Appendix A: Glossary					5
Appendix B: Analysis Models				5
Appendix C: To Be Determined List			6


Revision History
Name	Date	Reason For Changes	Version





1.	Introduction

1.1	Purpose
	The purpose of this project is to better understand how to use the Waterfall process by creating a Chess game as a team project.

1.2 	Document conventions
	To maintain order, keep every section of text separated by a space.

1.3	Intended Audience and Reading Suggestions
	This document is intended to be viewed by those directly involved with the process of creating the software. This includes 		members of the Snake Army team and the 'client' Mr. Jason Diaz.
	Snake Army members should begin reading this document from section 2, referring back to section 1.5 for explanations on relevant 	 issues, when applicable.
	Mr. Jason Diaz should read the document in its entirety and attempt to locate Easter eggs, or just because effort was expended 		in creating this document.

1.4	Product Scope
	This program is a chess game simulator. 1-2 players, human or AI, will take turns moving and taking pieces attempting to mate 		the other's king. The goal of this software is to show Snake Army superiority over all others.

1.5	References
	http://www.chessvariants.com/d.chess/chess.html
	https://commons.wikimedia.org/wiki/File:Chess_bdt60.png

2.	Overall Description

2.1	Product Perspective
  	This program will be a new, self-contained product designed to show the importance of the Waterfall method and design patterns.

2.2	Product Functions
	  - User shall be able to choose the number of human players participating in the game. Choosing 0 players means 2 AI opponents 	    will play a match against each other, 1 player means 1 human player and 1 AI player, 2 players means 2 human players playing 	     against each other.
	  - The game shall continue to run until one player mates the other's king, presses the 'surrender' button, or presses the 		    'restart' button.
	  - Each unique piece shall act as described in Section 3.1.
	  - The program shall start a match from the default starting position, with the white piece (if only 1 player is chosen, the 		    player shall go before the AI).
	  - The program shall keep track of the both color's king's check and mate.

2.3	User Classes and Characteristics
 	After delivery, only player users shall access the program, where they will choose to play or watch a match between 2 AI 		opponents. The AI opponent shall only have the ability to make legal chess moves, and will not be able to surrender, restart, or 	 otherwise quit the game/program.

2.4	Operating Environment
	The program shall operate on Windows 10, utilizing the Java platform.

2.5	Design and Implementation Constraints
  	Any computer which attempts to run the software shall run Windows 10, with Java 9.0.1, or backwards compatible version and a 		working mouse.
  	The Snake Army group shall not be responsible for any of the software once it has been delivered. Changes requested shall be 		made through official channels where a new cost evaluation shall be generated.

2.6	User Documentation
  	No documentation other than the Software Requirement Specification, System Design Document, and associated code files. Manuals 		or tutorials, on-line or otherwise shall not be prepared.

2.7	Assumptions and Dependencies
 	The version of Windows 10 used is compatible with the required or compatible Java version.

3.	External Interface Requirements

3.1	User Interface
	The software shall have a user interface (ASCII text is fine, sprites, html images, etc.).
	* To be discussed and determined as a team.
		- If using .png sprites: https://commons.wikimedia.org/wiki/File:Chess_bdt60.png
	
3.2	Functional Requirements

	1. The software shall have a user interface (ASCII text is fine, sprites, html images, etc.).
		* To be discussed and determined as a team.

	2. The software shall have at least ONE form of AI implementation.
		* At bare minimum, AI will make intelligent decisions, knowing when it's at risk of losing valuable pieces.
		  i.e. Sacrifice a pawn for a knight.
		* Defend King or move King if he's threatened.
		* Attack King when given an opportunity.
		
	3. The software shall be user input driven.
		* Mouse is required. Click a piece, and click where to go, as long as it is a legal move.

	4. The software shall begin from the normal starting position.
		* Default positions can be found here: http://www.chessvariants.com/d.chess/chess.html
		* More specifics can be added to increase the document size.
		* The game begins with the white pieces moving first and the black pieces second.

	5. The software shall be able to allow only one move per turn.

	6. The software shall be able to determine a check mate and end the game.
		* When a player is in check, and he cannot make a move such that after the move, the king is not in check, then he 			  is mated.

	7. Each piece shall move and attack only in their legal ways.
		a) Rook
			* The rook attacks in the same way it moves.
			* The rook moves in a straight line, horizontally or vertically in the + direction.
			* The rook shall not jump over other pieces, that is: all squares between the square where the rook starts its 				  move and where the rook ends its move must be empty.
			* Rooks shall be worth 5 points.
		b) Bishop
			* The bishop attacks in the same way it moves.
			* The bishop moves in a straight diagonal line, in the X direction.
			* The bishop shall also not jump over other pieces.
			* The bishop shall be worth 3 points.
		c) Queen
			* The queen attacks in the same way it moves.
			* The queen has the combined moves of the rook and the bishop, i.e., the queen may move in any straight line, 				  horizontal, vertical, or diagonal.
			* The queen shall also not jump over other pieces.
			* The queen shall be worth 9 points.
		d) Knight
			* The knight makes a move that consists of first one step in a horizontal or vertical direction, and then one 				  step diagonally in an outward direction.
			* Knights shall be worth 3 points.
		e) Pawn
			* When a pawn has not moved at all, the pawn may choose to move one square forward, or two squares forward. 				  Otherwise it shall only move one square directly forward.
			* Pawns shall only attack diagonally forward.
			* The pawn shall choose between attacking and moving.
			* If a pawn makes it to the opposing side of the chess board, it shall be promoted to any piece of choice.
			* Pawns shall be worth 1 point.
		f) King
			* The king shall move one square in any direction, so long as it does not put him under attack.
			* If the king has not moved, nor the rook, it shall have the opportunity to “castle” itself.


	8. The square where any piece ends their move shall not contain a piece of the same color.

	9. All pieces, when the square where their attack ends contains a piece of the opponent, then the opponent’s piece is taken.
		* Taken pieces are removed from the board, and out of play for the rest of the game. (Taking is not compulsory.)
		* Pieces that are captured shall be visible in a display on the right side of the game board.

	10. Each piece shall move in a contained area (the board) and shall not move off the board under any circumstances (including 		    claiming a piece of the opposite color).

	11. Each turn (Excluding AI), the player(s) shall be granted an option of forfeiting the match if they wish to do so.

	12. Each time a player (Including AI) moves a piece, the game shall not allow the opposing player to make a move until the 		    previous. piece is moved on the board.

	13. The spaces on the chess board shall be labeled on an XY axis where the origin begins at the bottom-left corner.
		* The Y axis shall be labeled 1-8 starting from the origin.
		* The X axis shall be labeled a-h starting from the origin.
